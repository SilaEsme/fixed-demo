@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<div class="dropdown">
    <button data-toggle="dropdown"
            @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu"
            class="btn btn-secondary dropdown-toggle user-button">
            <span>Account</span>
    </button>
    <div class="dropdown-menu-end dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView >
            <Authorized>
                <button @onclick="Logout" class="dropdown-item">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="register" class="dropdown-item">Register</a>
                <a href="login" class="dropdown-item">Login</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>

</div>

@code {
    private bool showUserMenu = false;
    private string? UserMenuCssClass => showUserMenu ? "show-menu" : null;
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await _localStorage.RemoveItemAsync("token");
        await _authenticationStateProvider.GetAuthenticationStateAsync();
        _navigationManager.NavigateTo("");
    }
}